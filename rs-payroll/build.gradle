plugins {
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'org.asciidoctor.jvm.convert'
    id 'application'
    id 'idea'
    id "com.google.cloud.tools.jib"
}

//gradle 文件引用
apply from: file("src/env/$env/build-jvm.gradle")

//gradle 文件引用 容器参数
apply from: file("src/env/$env/container.gradle")

ext {
    snippetsDir = file('build/generated-snippets')
    docsSnippetsDir = file('src/docs/asciidoc/snippets')
    docsImagesDir = file('src/docs/asciidoc/images')
    jdkHome = System.getenv("JAVA_HOME")
    queryDslVersion = '4.3.1'
    //queryDslVersion = '4.2.1'

}

if (APP_NAME == "") {
    APP_NAME = "${project.name}"
}
println("RELEASE:${RELEASE}")
println("BUILD_NUMBER:${BUILD_NUMBER}")
println("project.version:${project.version}")
println("project.name:${project.name}")

if (RELEASE == "") {
    //RELEASE = version+'.'+time()
    RELEASE = version
}
if (BUILD_NUMBER != "") {
    BUILD_NUMBER = '.' + BUILD_NUMBER
}
if (JVM_ARGS != "") {
    for (arg in JVM_ARGS.split(",")) {
        jvmArg.add("${arg}".toString())
    }
}
configurations {
    create("asciidoctor")
}

mainClassName = 'chain.fxgj.server.payroll.PayrollApplication'

def printPropers() {
    println("env:$env")
    println("project.name:${project.name}")
    println("${RELEASE}")
    //println("release:${RELEASE}${BUILD_TIMESTAMP}")
    println("release:${RELEASE}${BUILD_NUMBER}")
    println("project.jdkHome:${jdkHome}")
    println("harbor:${HARBOR}")
    print("jvmArg:[\n")
    for (arg in jvmArg) {
        print("\t$arg \n")
    }
    print("]\n")
    println("jdk.apline:$JdkImage")
}

//代表Java源文件和资源文件的逻辑组
//https://docs.gradle.org/6.5.1/dsl/org.gradle.api.tasks.SourceSet.html
sourceSets {
    main {
        //将要复制到资源输出目录中的非Java资源。
        //https://docs.gradle.org/6.5.1/dsl/org.gradle.api.file.SourceDirectorySet.html
        resources {
            //组成此集合的源目录。不过滤不存在的源目录。
            srcDirs = ["src/main/resources", "src/env/$env"]
        }
//        println("sourceSets")
//        println(java.outputDir)
    }
}

//Java 库发布插件  distribution 将打包所有的运行时依赖。 gradle distZip 把 distrubution 打包成一个 ZIP 文件
//https://docs.gradle.org/6.5.1/dsl/org.gradle.api.distribution.Distribution.html
distributions {
    main {
        distributionBaseName = "rs-payroll"
        version = ""
        //置分发的内容
        contents {
            from("src/env/$env") {
                into "config"
            }
        }
    }
}
//https://docs.gradle.org/6.5.1/dsl/org.gradle.jvm.application.tasks.CreateStartScripts.html
//the Gradle "application" plugin adds a pre-configured task of this type named "startScripts".
startScripts {
    doLast {
        def scriptFile = file "${outputDir}/${applicationName}"
        scriptFile.text = scriptFile.text.replace('CLASSPATH=$APP_HOME/lib', 'CLASSPATH=$APP_HOME/config/:$APP_HOME/lib')
        println("src/env/$env")
        println("$scriptFile")
        println("$outputDir")
        println("$applicationName")
        //println(scriptFile.text)
    }
}

dependencyManagement {
    imports {
        //https://github.com/spring-cloud/spring-cloud-release/blob/vHoxton.RELEASE/spring-cloud-dependencies/pom.xml
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}


dependencies {
    compile('chain.cloud:data-client:2.1.6')
    compile("chain.news:news-fengin:1.0.1")
    compile("chain:ids-client:1.1.10")
    compile("chain:pub-client:2.0.1-SNAPSHOT")
    compile('chain:wage-client:2.0.1')
    compile('chain:payroll-client:2.0.7')
    compile('chain.tax:tax-client:1.0.9')

    compile('chain.wisales:wisales-client:1.0.2.80-SNAPSHOT')
    compile('chain.fxgj:fxgj-ent-client:1.0.24')
    compile('chain:utils-jpa:1.0.4')
    compile 'net.sf.json-lib:json-lib:2.4:jdk15'
    compile('chain:css-config:1.1.3')
    compile('com.lmax:disruptor:3.4.2')

    //红包增加
    compile("chain:activity-client:1.0.1-SNAPSHOT")
    compile("chain.fxgj:fxgj-account-client:1.0.16")
    compile("chain.fxgj:fxgj-wage-client:1.0.23")

    //密码键盘
    compile('chain:utils-softkeyboard:1.0.0-SNAPSHOT')

    implementation(
            //https://github.com/spring-projects/spring-boot/blob/v2.2.2.RELEASE/spring-boot-project/spring-boot-dependencies/pom.xml
            platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion"),
            'org.springframework.data:spring-data-mongodb',
            "com.querydsl:querydsl-mongodb:${queryDslVersion}",
            "com.querydsl:querydsl-jpa:${queryDslVersion}",
            "com.querydsl:querydsl-apt:${queryDslVersion}:morphia",
            'org.springframework.boot:spring-boot-starter-data-mongodb',
            'org.springframework.boot:spring-boot-starter-webflux',
            'org.springframework.boot:spring-boot-starter-data-redis',
            'org.springframework.boot:spring-boot-starter-validation',
            'org.springframework.boot:spring-boot-starter-actuator',
            'org.springframework.boot:spring-boot-starter-aop',
            'org.springframework.boot:spring-boot-starter-cache',
            'org.springframework.boot:spring-boot-starter-data-jpa',
            'org.springframework.data:spring-data-commons',
            'org.springframework.cloud:spring-cloud-context',
    )
    asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    annotationProcessor(
            'org.projectlombok:lombok',
            "com.querydsl:querydsl-apt:$queryDslVersion:morphia",
            'org.springframework.data:spring-data-mongodb',
            'org.springframework.cloud:spring-cloud-context',
            'org.springframework.boot:spring-boot-configuration-processor'
    )
    developmentOnly "com.querydsl:querydsl-core:${queryDslVersion}"
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'io.projectreactor:reactor-test'
    testCompile "org.springframework.restdocs:spring-restdocs-webtestclient"
    testCompile files("$jdkHome/lib/tools.jar")

    // TODO Grafana+Prometheus 系统监控监控 需要确认是否使用最新版本
    compile group: 'io.micrometer', name: 'micrometer-registry-prometheus', version: '1.5.4'

    compile 'org.springframework.cloud:spring-cloud-starter-consul-all'
    compile 'org.springframework.cloud:spring-cloud-starter-openfeign'
    compile 'org.springframework.cloud:spring-cloud-context'
    compile 'org.springframework.cloud:spring-cloud-starter-bootstrap'
    compile 'io.github.openfeign:feign-okhttp'
    //compile group: 'com.fasterxml.jackson.jaxrs', name: 'jackson-jaxrs-json-provider', version: '2.9.8'
    //增加mq配置
    compile 'org.springframework.boot:spring-boot-starter-amqp'
    compile('chain:utils-mq:1.0.0')
    compile('org.glassfish.jersey.media:jersey-media-json-jackson:2.22.1')
    compile('org.glassfish.jersey.connectors:jersey-apache-connector:2.27')

    //compile('mysql:mysql-connector-java:5.1.38')
    //compile 'org.springframework.cloud:spring-cloud-starter-zipkin'
    // redis 连接池
    implementation group: 'org.apache.commons', name: 'commons-pool2', version: '2.9.0'

    compile('org.apache.pdfbox:pdfbox:1.5.0')
    compile('com.itextpdf:itextpdf:5.5.13')
    compile('javax.ws.rs:javax.ws.rs-api:2.1.1')

    //google 图片压缩插件
    // https://mvnrepository.com/artifact/net.coobird/thumbnailator
    implementation group: 'net.coobird', name: 'thumbnailator', version: '0.4.8'

    //compile ('chain.cloud.start:spring-boot-starter-consul-heartbeat:0.0.1-SNAPSHOT')
}


/** asciidoc **/
//asciidoctorj {
//    modules {
//        diagram.use()
//    }
//}
asciidoctor {
    logDocuments true
    //sourceDir("src/docs/asciidoc")
    outputDir file("build/docs/")
    inputs.dir docsSnippetsDir
    sources {
        include 'index.adoc'
    }
    baseDirFollowsSourceDir()
    configurations("asciidoctor")
    options doctype: 'book', ruby: 'erubis'
    attributes 'snippets': docsSnippetsDir,
            //'release': "${RELEASE}",
            'revdate': releaseTime()
    doFirst {
        copy {
            from "${docsSnippetsDir}"
            into "${snippetsDir}"
        }
    }
    doLast {
        copy {
            from 'build/docs/'
            into "src/main/resources/static/docs"
            include '*.html', '*.png'
        }
    }
}
//asciidoctor {
//    outputDir "${buildDir}/asciidoc"
//    sources {
//        include 'index.adoc'
//    }
//    options doctype: 'book', ruby: 'erubis'
//    attributes 'snippets': docsSnippetsDir,
//            'backends': "pdf"
//}
/** end asciidoc **/

test {
    outputs.dir snippetsDir
    doLast {
        copy {
            from "${snippetsDir}"
            into "${docsSnippetsDir}"
        }
    }
}

//打包
jar {
    dependsOn asciidoctor
    enabled = true
    if (env != "prod") {
        from("${asciidoctor.outputDir}/html5") {
            into 'static/docs'
        }
    }
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

//设置启动类
bootJar {
    dependsOn asciidoctor
    if (env != "prod") {
        from("${asciidoctor.outputDir}") {
            into 'static/public/docs'
        }
    }
}

jib {
    printPropers()
    //from：拉取的镜像的配置
    from {
        //image：拉取或生成的镜像名称
        image = "$JdkImage"
        //image = 'registry.cn-hangzhou.aliyuncs.com/kayak/alpine:11.0.9-alpine'
        //image = 'registry.cn-hangzhou.aliyuncs.com/kayak/alpine:8u171-alpine'
    }
    //to:要生成的镜像的配置
    to {
        allowInsecureRegistries = true
        //image：拉取或生成的镜像名称
        //image = "registry.cn-hangzhou.aliyuncs.com/kayak/news:11-latest"
        //image = "registry.cn-hangzhou.aliyuncs.com/kayak/news:${RELEASE}-latest"
        //image = "${HARBOR}/${HARBOR_PROJECT}/${APP_NAME}:${RELEASE}${BUILD_TIMESTAMP}"
        image = "${HARBOR}/${HARBOR_PROJECT}/${APP_NAME}:${RELEASE}${BUILD_NUMBER}"

        //tags = ["8-latest"]

        //认证信息，分别为用户名和密码
        //auth {
        //    username = "503965137@qq.com"
        //    password = "liusong1010"
        //}
        auth {
            username = "$HARBOR_USERNAME"
            password = "$HARBOR_PASSWORD"
        }
    }
    //容器的属性
    container {
        //JVM 容器的参数，和 Dockerfile 的 ENTRYPOINT作用相同
        jvmFlags = jvmArg
        //启动类限定名
        mainClass = mainClassName
        creationTime = 'USE_CURRENT_TIMESTAMP'
        filesModificationTime = releaseTime()
        volumes = ["/app/resources", "/tmp/logs/"]
    }

}