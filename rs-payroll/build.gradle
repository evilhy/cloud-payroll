apply plugin: 'org.asciidoctor.convert'
apply plugin: "com.ewerk.gradle.plugins.querydsl"

querydsl {
    springDataMongo = true
    querydslSourcesDir = "$buildDir/generated/source/apt/main"
}
mainClassName = 'chain.fxgj.server.payroll.PayrollApplication'
jar {
    enabled = true
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

applicationDefaultJvmArgs = [
        "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5002",
        "-Dfile.encoding=utf-8",
        "-Xms512m",
        "-Xmx2048m",
        "-Xss1024K",
        "-XX:PermSize=256m",
        "-XX:MaxPermSize=512m"
]
sourceSets {
    main {
        resources {
            srcDirs = ["src/main/resources", "src/env/$env", "$buildDir/generated/source/apt/main"]
        }
    }
}

distributions {
    main {
        baseName = "rs-payroll"
        version = ""
        contents {
            from("src/env/$env") {
                into "config"
            }
        }
    }
}
startScripts {
    doLast {
        def scriptFile = file "${outputDir}/${applicationName}"
        scriptFile.text = scriptFile.text.replace('CLASSPATH=$APP_HOME/lib', 'CLASSPATH=$APP_HOME/config/:$APP_HOME/lib')
        println("src/env/$env")
    }
}
ext {
    springCloudVersion = 'Greenwich.RELEASE'
    snippetsDir = file('build/generated-snippets')
    docsSnippetsDir = file('src/docs/snippets')
    jdkHome = System.getenv("JAVA_HOME")
    if (jdkHome == null) {
        jdkHome = "/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home";
    }
}
dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}
dependencies {
//    compile('chain:wage-client:1.0.0')
    compile('chain:payroll-client:1.0.25')
    compile('chain:utils-jpa:1.0.4')
    compile('chain:utils-poi:2.0.2')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')


    compile('chain:css-config:1.0')
    compile 'org.springframework.boot:spring-boot-starter-validation'
    compile 'org.springframework.boot:spring-boot-starter-webflux'
    compile 'org.springframework.boot:spring-boot-starter-data-redis'
    compile('org.springframework.boot:spring-boot-starter-cache')
    compile 'org.springframework.boot:spring-boot-starter-data-mongodb'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'org.springframework.boot:spring-boot-starter-aop'
    //compile 'io.projectreactor.netty:reactor-netty'
    asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testCompile "org.springframework.restdocs:spring-restdocs-webtestclient" //如果为mvc换成mvc测试相关依赖
    testCompile files("$jdkHome/lib/tools.jar")

    //Grafana+Prometheus 系统监控监控
    compile group: 'io.micrometer', name: 'micrometer-registry-prometheus', version: '1.0.6'
    compile group: 'com.sun.mail', name: 'javax.mail', version: '1.6.2'
    compile 'org.springframework.cloud:spring-cloud-starter-consul-all'

    compile('mysql:mysql-connector-java:5.1.38')

    compile('com.lmax:disruptor:3.4.2')
    //compile('org.aspectj:aspectjweaver:1.8.8')

    //zhucj添加
    compile group: 'org.glassfish.jersey.core', name: 'jersey-client', version: '2.27'
    compile group: 'org.glassfish.jersey.inject', name: 'jersey-hk2', version: '2.27'
    compile group: 'com.fasterxml.jackson.jaxrs', name: 'jackson-jaxrs-json-provider', version: '2.9.8'
    //application/json
    compile group: 'org.glassfish.jersey.media', name: 'jersey-media-json-jackson', version: '2.26'
    //compile 'org.springframework.cloud:spring-cloud-starter-openfeign'
}

test {
    outputs.dir snippetsDir
    doLast {
        copy {
            from "${snippetsDir}"
            into "${docsSnippetsDir}"
        }
    }
}

//asciidoctor {
//    outputDir "${buildDir}/asciidoc"
//    attributes 'snippets': docsSnippetsDir
//    sources {
//        include 'insideAPI.adoc','oilOrder.adoc'
//    }
//    options doctype: 'book', ruby: 'erubis'
//    attributes 'snippets': docsSnippetsDir,
//            'backends': "pdf"
//}
asciidoctor {
    attributes 'snippets': docsSnippetsDir
}
jar {
    dependsOn asciidoctor
    if (env != "prod") {
        from("${asciidoctor.outputDir}/html5") {
            into 'static/docs'
        }
    }
}
bootJar {
    dependsOn asciidoctor
    if (env != "prod") {
        from("${asciidoctor.outputDir}/html5") {
            into 'static/public/docs'
        }
    }
}

querydsl {
    jpa = true
    querydslSourcesDir = "$buildDir/generated/source/apt/main"
}